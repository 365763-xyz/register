name: Update DNS Records

on:
  push:
    branches:
      - main
    paths:
      - 'domains/*.json'

jobs:
  update-dns:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Update DNS Records
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
        run: |
          for file in domains/*.json; do
            if [ -f "$file" ]; then
              echo "Processing file: $file"
              records=$(jq -c '.records[]' "$file")
              echo "$records" | while IFS= read -r record; do
                type=$(echo "$record" | jq -r '.type')
                name=$(echo "$record" | jq -r '.name')
                content=$(echo "$record" | jq -r '.content')
                
                # Force proxied to false for TXT records
                if [ "$type" = "TXT" ]; then
                  proxied="false"
                else
                  proxied=$(echo "$record" | jq -r '.proxied // true')
                fi
                
                echo "Creating DNS record: $name ($type)"
                
                response=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
                  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "{
                    \"type\": \"$type\",
                    \"name\": \"$name\",
                    \"content\": \"$content\",
                    \"proxied\": $proxied
                  }")
                
                if echo "$response" | jq -e '.success' > /dev/null; then
                  echo "✅ Created DNS record: $name ($type)"
                else
                  error_msg=$(echo "$response" | jq -r '.errors[0].message')
                  echo "❌ Failed to create DNS record: $error_msg"
                  exit 1
                fi
              done
            fi
          done
